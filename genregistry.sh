#!/bin/bash
if [[ $# -ne 3 ]]; then
	echo "Usage $0 [tudocomp_algorithms.cpp] [tudocomp.hpp] [config.h]"
	exit 1
fi



online_coder=(
    ASCIICoder coders/ASCIICoder.hpp
    BitCoder coders/BitCoder.hpp
    EliasGammaCoder coders/EliasGammaCoder.hpp
    EliasDeltaCoder coders/EliasDeltaCoder.hpp
)
offline_coder=(
    Code2Coder coders/Code2Coder.hpp
    HuffmanCoder coders/HuffmanCoder.hpp
)
all_coder=(
	${online_coder[@]}
	${offline_coder[@]}
)
lz78_trie=(
    lz78::BinarySortedTrie compressors/lz78/BinarySortedTrie.hpp
    lz78::BinaryTrie compressors/lz78/BinaryTrie.hpp
    lz78::HashTrie compressors/lz78/HashTrie.hpp
    lz78::MyHashTrie compressors/lz78/MyHashTrie.hpp
    lz78::TernaryTrie compressors/lz78/TernaryTrie.hpp
    lz78::CedarTrie compressors/lz78/CedarTrie.hpp
)
grep -q '^#define JUDY_H_AVAILABLE 1' "$3" && lz78_trie+=(lz78::JudyTrie compressors/lz78/JudyTrie.hpp)

esa_strat=(
    esacomp::MaxHeapStrategy compressors/esacomp/strategies/MaxHeapStrategy.hpp
    esacomp::MaxLCPStrategy compressors/esacomp/strategies/MaxLCPStrategy.hpp
    esacomp::LazyListStrategy compressors/esacomp/strategies/LazyListStrategy.hpp
)
esa_buffer=(
    esacomp::MyMapBuffer compressors/esacomp/decoding/MyMapBuffer.hpp
    esacomp::MultimapBuffer compressors/esacomp/decoding/MultiMapBuffer.hpp
    esacomp::SuccinctListBuffer compressors/esacomp/decoding/SuccinctListBuffer.hpp
    esacomp::LazySuccinctListBuffer compressors/esacomp/decoding/LazySuccinctListBuffer.hpp
    esacomp::DecodeForwardQueueListBuffer compressors/esacomp/decoding/DecodeQueueListBuffer.hpp
)
esa_coder=(
    ASCIICoder coders/ASCIICoder.hpp
    Code2Coder coders/Code2Coder.hpp
)
lz78u_string_coder=(
    lz78u::AsciiNtStringCoder compressors/lz78u/AsciiNtStringCoder.hpp
    lz78u::HuffmanStringCoder compressors/lz78u/HuffmanStringCoder.hpp
)

function ex {
	local -a 'arr=("${!'"$1"'[@]}")'
	local ins="$1"'[arg]'
	local i=0
	local j=0
	for arg in ${arr[@]}; do
		((j=i%2))
		local a="${!ins}"
		if [[ $j -eq 0 ]]; then
			echo "$a"
		fi
			((++i))
	done
}

function regr {
local prefix="$1"
shift
local -a 'args'
if [[ -n "$1" ]]; then
	param="$1"
	shift
	for p in $(ex "$param"); do
		regr "$prefix,$p" $@
	done
else
	echo "$prefix"
fi
}


includes=()
function reg {
local compressor="$1"
shift
includes+=($1)
shift
if [[ $# -eq 0 ]]; then
	echo "  r.register_compressor<$compressor>();"
elif [[ "$@" == "_" ]]; then
    echo "  r.register_compressor<$compressor<>>();"
else
	for param in $@; do #add all includes
		local -a 'arr=("${!'"$param"'[@]}")'
		local ins="$param"'[arg]'
		local i=0
		local j=0
		for arg in ${arr[@]}; do
			((j=i%2))
			local a="${!ins}"
			if [[ $j -eq 1 ]]; then
				includes+=("$a")
			fi
			((++i))
		done
	done
	regr '' $@ |
	while read line; do
		echo "  r.register_compressor<$compressor<${line:1}>>();"
	done
fi
echo ''
}


function algoList {
cat <<EOF
/* Autogenerated file by genregistry.sh */
#include <tudocomp/tudocomp.hpp>
#include <tudocomp_driver/Registry.hpp>

namespace tdc_algorithms {

using namespace tdc;

void register_algorithms(Registry& r);

// One global instance for the registry
Registry REGISTRY = Registry::with_all_from(register_algorithms);

void register_algorithms(Registry& r) {

EOF

reg PLCPCompressor              compressors/PLCPCompressor.hpp esa_coder esa_buffer
reg RunLengthEncoder            compressors/RunLengthEncoder.hpp online_coder
reg LiteralEncoder              compressors/LiteralEncoder.hpp all_coder
reg LZ78Compressor              compressors/LZ78Compressor.hpp online_coder lz78_trie
reg LZ78UCompressor             compressors/LZ78UCompressor.hpp online_coder lz78u_string_coder
reg LZWCompressor               compressors/LZWCompressor.hpp online_coder lz78_trie
reg RePairCompressor            compressors/RePairCompressor.hpp all_coder
reg LZSSLCPCompressor           compressors/LZSSLCPCompressor.hpp all_coder
reg ESACompressor               compressors/ESACompressor.hpp esa_coder esa_strat esa_buffer
reg LZSSSlidingWindowCompressor compressors/LZSSSlidingWindowCompressor.hpp online_coder
reg EasyRLECompressor           compressors/EasyRLECompressor.hpp
reg MTFCompressor               compressors/MTFCompressor.hpp
reg BWTCompressor               compressors/BWTCompressor.hpp _
reg ChainCompressor             compressors/ChainCompressor.hpp
reg NoopCompressor              compressors/NoopCompressor.hpp


cat <<EOF
}//function register_algorithms

}//ns

EOF
}


algoList > "$1"

cat <<'EOF' > "$2"
/*
	Autogenerated file by genregistry.sh
    Include this to include practically all of tudocomp.

    This header also contains the Doxygen documentation of the main namespaces.
*/

#pragma once

/// \brief Contains the text compression and encoding framework.
///
/// This is the framework's central namespace in which text compression and
/// coding algorithms are contained, as well as utilities needed for text
/// compression and coding (e.g. I/O). Families of compressors and encoders
/// or utility groups are contained in the respective sub-namespaces. The
/// namespace \c tudocomp itself contains types important for all of the
/// framework and its communication.
namespace tdc {

/// \brief Contains I/O abstractions and utilities.
///
/// All I/O done by compressors and encoders is routed through the \ref Input
/// and \ref Output abstractions over the underlying file, memory or stream
/// I/O.
///
/// \sa
/// \ref Input for the input interface and \ref Output for the output
/// interface.
namespace io {
}

/// \brief Contains compressors and encoders that work with Lempel-Ziv-78-like
/// dictionaries.
///
/// The LZ78 family works with bottom-up dictionaries containing indexed
/// entries to achieve compression. Each entry points to a \e prefix (another
/// dictionary entry) and a follow-up symbol.
namespace lz78 {
}

/// \brief Contains compressors and encoders that work with
/// Lempel-Ziv-Storer-Szymansky-like factors.
///
/// The LZSS family works with factors representing references to positions
/// within the original text that replace parts of the same text, effectively
/// using the input text itself as a dictionary. They consist of a \e source
/// text position and a \e length.
namespace lzss {
}

/// \brief Contains compressors and encoders that work with
/// Lempel-Ziv-Welch-like dictionaries.
///
/// The LZW family works with bottom-up dictionaries containing indexed entries
/// to achieve compression. Other than \ref lz78, the dictionary entries do not
/// explicitly store the follow-up symbol. Instead, they are re-generated on
/// the fly by the decoder.
namespace lzw {
}
}//ns tdc
EOF

for i in $(echo "${includes[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '); do
	echo "#include <tudocomp/${i}>"  >> "$2"
done
